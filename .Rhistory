### Grabs the closing odds for current events (need to run on a Thursday before round ends) ###
library(httr)
library(jsonlite)
setwd("C:/Users/johnk/Documents/Golf/Datagolf/Multinomial R4 Model/Odds")
url <- 'https://feeds.datagolf.com/betting-tools/outrights?tour=pga&market=win&odds_format=decimal&file_format=json&key=6a38380b526586b5c052d3db3bce'
response <- GET(url)
if (http_status(response)$category == "Success") {
# Parse JSON content and return
api_data <- content(response, "text", encoding = "UTF-8")
} else {
# Return NULL or handle error as needed
warning(paste("Failed to retrieve data for tour:", tour, "event_id:", event_id, "year:", year))
}
json_data <- fromJSON(api_data)
event_name <- json_data[['event_name']]
last_updated <- json_data[['last_updated']]
player_names <- json_data[['odds']][['player_name']]
pinnacle <- json_data[['odds']][['pinnacle']]
draftkings <- json_data[['odds']][['draftkings']]
fanduel <- json_data[['odds']][['fanduel']]
williamhill <- json_data[['odds']][['williamhill']]
my_odds <- data.frame(player_names, pinnacle, draftkings, fanduel, williamhill)
my_odds$close_odds <- pmax(my_odds$pinnacle, my_odds$draftkings, my_odds$fanduel, my_odds$williamhill, na.rm=TRUE)
year <- substr(last_updated, 1, 4)
filename <- paste0(event_name, ' ', year, '.csv')
write.csv(my_odds, filename, row.names=FALSE)
library(dtwclust)
citation("dtwclust")
quarto preview
### Grabs the closing odds for current events (need to run on a Thursday before round ends) ###
library(httr)
library(jsonlite)
setwd("C:/Users/johnk/Documents/Golf/Datagolf/Multinomial R4 Model/Odds")
url <- 'https://feeds.datagolf.com/betting-tools/outrights?tour=pga&market=win&odds_format=decimal&file_format=json&key=6a38380b526586b5c052d3db3bce'
response <- GET(url)
if (http_status(response)$category == "Success") {
# Parse JSON content and return
api_data <- content(response, "text", encoding = "UTF-8")
} else {
# Return NULL or handle error as needed
warning(paste("Failed to retrieve data for tour:", tour, "event_id:", event_id, "year:", year))
}
json_data <- fromJSON(api_data)
event_name <- json_data[['event_name']]
last_updated <- json_data[['last_updated']]
player_names <- json_data[['odds']][['player_name']]
pinnacle <- json_data[['odds']][['pinnacle']]
draftkings <- json_data[['odds']][['draftkings']]
fanduel <- json_data[['odds']][['fanduel']]
williamhill <- json_data[['odds']][['williamhill']]
my_odds <- data.frame(player_names, pinnacle, draftkings, fanduel, williamhill)
my_odds$close_odds <- pmax(my_odds$pinnacle, my_odds$draftkings, my_odds$fanduel, my_odds$williamhill, na.rm=TRUE)
year <- substr(last_updated, 1, 4)
filename <- paste0(event_name, ' ', year, '.csv')
write.csv(my_odds, filename, row.names=FALSE)
###################################
### ClubElo Ratings Calibration ###
###################################
# See how the Elo ratings correlate with actual results
# ---- Import libraries ----
library(tidyverse)
library(here)
library(patchwork)
library(MASS)
# ---- Load utility functions ----
source(here("utils", "elo_helper_functions.R"))
install.packages("gt")
### Grabs the closing odds for current events (need to run on a Thursday before round ends) ###
library(httr)
library(jsonlite)
setwd("C:/Users/johnk/Documents/Golf/Datagolf/Multinomial R4 Model/Odds")
url <- 'https://feeds.datagolf.com/betting-tools/outrights?tour=pga&market=win&odds_format=decimal&file_format=json&key=6a38380b526586b5c052d3db3bce'
response <- GET(url)
library(httr)
library(jsonlite)
setwd("C:/Users/johnk/Documents/Golf/Datagolf/Multinomial R4 Model/Odds")
url <- 'https://feeds.datagolf.com/betting-tools/outrights?tour=pga&market=win&odds_format=decimal&file_format=json&key=6a38380b526586b5c052d3db3bce'
response <- GET(url)
if (http_status(response)$category == "Success") {
# Parse JSON content and return
api_data <- content(response, "text", encoding = "UTF-8")
} else {
# Return NULL or handle error as needed
warning(paste("Failed to retrieve data for tour:", tour, "event_id:", event_id, "year:", year))
}
json_data <- fromJSON(api_data)
event_name <- json_data[['event_name']]
last_updated <- json_data[['last_updated']]
player_names <- json_data[['odds']][['player_name']]
pinnacle <- json_data[['odds']][['pinnacle']]
draftkings <- json_data[['odds']][['draftkings']]
fanduel <- json_data[['odds']][['fanduel']]
williamhill <- json_data[['odds']][['williamhill']]
my_odds <- data.frame(player_names, pinnacle, draftkings, fanduel, williamhill)
my_odds$close_odds <- pmax(my_odds$pinnacle, my_odds$draftkings, my_odds$fanduel, my_odds$williamhill, na.rm=TRUE)
year <- substr(last_updated, 1, 4)
filename <- paste0(event_name, ' ', year, '.csv')
write.csv(my_odds, filename, row.names=FALSE)
shiny::runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
shiny::runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
shiny::runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
rsconnect::accounts()
rsconnect::accountInfo("yourname")
rsconnect::accountInfo("statybara")
shiny::runApp('C:/Users/johnk/Documents/R/Shiny Apps/Betting Variance')
### This script gets closing odds and player stats from the current
### tournament, and calculates forecast odds for winner after R3
# I may just have to manually enter the closing odds for now, since
# it appears DG don't add them until after the event.
# Set WD to avoid error at work
# setwd("C:/Users/knghj00/Documents/Golf/Multinomial R4 Model")
# Load required libraries
library(httr)
library(jsonlite)
library(readxl)
library(dplyr)
url <- "https://feeds.datagolf.com/preds/live-tournament-stats?stats=sg_putt,sg_arg,sg_app,sg_ott,distance,accuracy,gir,&round=1&tour=pga&key=6a38380b526586b5c052d3db3bce"
response <- GET(url)
r1 <- fromJSON(content(response, "text", encoding = "UTF-8"))[['live_stats']]
url <- "https://feeds.datagolf.com/preds/live-tournament-stats?stats=sg_putt,sg_arg,sg_app,sg_ott,distance,accuracy,gir,&round=2&tour=pga&key=6a38380b526586b5c052d3db3bce"
response <- GET(url)
r2 <- fromJSON(content(response, "text", encoding = "UTF-8"))[['live_stats']]
url <- "https://feeds.datagolf.com/preds/live-tournament-stats?stats=sg_putt,sg_arg,sg_app,sg_ott,distance,accuracy,gir,&round=3&tour=pga&key=6a38380b526586b5c052d3db3bce"
response <- GET(url)
r3 <- fromJSON(content(response, "text", encoding = "UTF-8"))[['live_stats']]
url <- "https://feeds.datagolf.com/preds/live-tournament-stats?stats=sg_putt,sg_arg,sg_app,sg_ott,distance,accuracy,gir,&round=event_avg&tour=pga&key=6a38380b526586b5c052d3db3bce"
response <- GET(url)
leaderboard <- fromJSON(content(response, "text", encoding = "UTF-8"))[['live_stats']]
# Calculate stats as mean/sum of r1, r2, r3
cols_to_update <- c('accuracy', 'distance', 'gir', 'sg_app', 'sg_arg', 'sg_ott', 'sg_putt')
for (col in cols_to_update) {
leaderboard[[col]] <- rowMeans(cbind(r1[[col]], r2[[col]], r3[[col]]))
}
leaderboard[['total']] <- rowSums(cbind(r1[['round']], r2[['round']], r3[['round']]))
# Complete cases only
leaderboard <- leaderboard[complete.cases(leaderboard[,c('sg_app', 'sg_arg', 'sg_ott', 'sg_putt',
'total')]), ]
# Calculate features
leaderboard$strokes_back <- leaderboard$total - min(leaderboard$total)
leaderboard$is_leader <- ifelse(leaderboard$strokes_back==0, 1, 0)
leaderboard$strokes_ahead <- ifelse(leaderboard$strokes_back == 0, sort(leaderboard$total)[2] - leaderboard$total, 0)
leaderboard$one_back <- ifelse(leaderboard$strokes_back==1, 1, 0)
leaderboard$two_back <- ifelse(leaderboard$strokes_back==2, 1, 0)
# Calculate Kelly stakes with market regression
kelly <- function(my_odds, market_odds, bankroll, commission=0.02, regress=0.5) {
true_p <- 1 / (regress * market_odds + (1 - regress) * my_odds)
net_odds <- (market_odds - 1) * (1 - commission)
stake <- (true_p - (1 - true_p) / net_odds) * bankroll
stake <- round(stake, 2)
return(stake)
}
# Get the closing odds
manual_odds <- read.csv("C:\\Users\\johnk\\Documents\\Golf\\Datagolf\\Multinomial R4 Model\\Odds\\3M Open 2025.csv")
leaderboard <- merge(leaderboard, manual_odds[,c("player_names", "close_odds")], by.x="player_name", by.y="player_names", all.x=TRUE, all.y=FALSE)
leaderboard$close_odds[is.na(leaderboard$close_odds)] <- 100
coefficients <- c(-1.519, -1.077, -0.06, -0.906, -0.271, 0.046, 2.185,
4.418, -1.902, -1.494, -1.283, -1.487, -0.56)
leaderboard$log_close_odds <- log(leaderboard$close_odds)
selected_columns <- leaderboard[, c("strokes_back",
"is_leader",
"strokes_ahead",
"one_back",
"two_back",
"distance",
"accuracy",
"gir",
"sg_ott",
"sg_app",
"sg_arg",
"sg_putt",
"log_close_odds")]
# Initial value for my_intercept
my_intercept <- -3.4043
# Function to calculate the sum of probabilities given an intercept
calc_prob_sum <- function(intercept) {
logit <- as.vector(as.matrix(selected_columns) %*% coefficients + intercept)
exp_logit <- exp(logit)
prob <- exp_logit / (1 + exp_logit)
sum(prob)
}
# Function to be minimized by optim
objective_function <- function(intercept) {
(calc_prob_sum(intercept) - 1)^2
}
# Use optim to find the intercept that makes the sum of probabilities 1
result <- optim(par = my_intercept, fn = objective_function)
# The optimal intercept
optimal_intercept <- result$par
# Update the leaderboard with the optimal intercept
leaderboard$logit <- as.vector(as.matrix(selected_columns) %*% coefficients + optimal_intercept)
leaderboard$exp <- exp(leaderboard$logit)
leaderboard$prob <- leaderboard$exp / (1 + leaderboard$exp)
# Display the optimal intercept and the sum of probabilities
cat("Optimal intercept:", optimal_intercept, "\n")
cat("Sum of probabilities:", sum(leaderboard$prob), "\n")
leaderboard$odds <- round(1 / leaderboard$prob, 3)
leaderboard_trimmed <- leaderboard %>%
select(player_name, odds) %>%
mutate(odds = case_when(
odds < 2       ~ round(odds, 3),
odds < 5       ~ round(odds, 2),
odds < 50      ~ round(odds, 1),
TRUE           ~ round(odds, 0)
))
View(leaderboard_trimmed)
kelly(6,7.2,3522)
kelly(6.3,7.2,3522)
kelly(22.8,48,3522)
kelly(326,600,3522)
1/0.71
1/0.41
1/0.26
1/0.33
1/0.52
1/0.72
1/0.53
