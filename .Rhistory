ev_curve <- dnorm(x_range, mean = sum_ev, sd = sd_ev)
my_ev_curve <- dnorm(x_range, mean = sum_my_ev, sd = sd_my_ev)
# Create a data frame for plotting
plot_data <- data.frame(
x = x_range,
ev_curve = ev_curve,
my_ev_curve = my_ev_curve
)
# Plot the normal distribution curves with a vertical line for sum_net_pl
bet_record_plot_830 <- ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = ev_curve, color = "Market is Correct")) +                # EV curve
geom_line(aes(y = my_ev_curve, color = "My Price is Correct")) +          # My EV curve
geom_vline(xintercept = sum_net_pl, linetype = "dashed", color = "black") +  # Net PL vertical line
labs(
title = "Distribution Curves: Market Price vs. My Price",
x = "Total Profit",
y = "Density",
color = "Assumption"
) +
theme_minimal() +
scale_color_manual(values = c("Market is Correct" = "red", "My Price is Correct" = "blue")) +
geom_label(aes(x = sum_net_pl,
y = max(c(ev_curve, my_ev_curve)),
label = "After 830 bets"),
color = "black",
fill = "white",
label.size = 0)
bet_record_plot_830
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/betting_variance/viz")
ggsave("bet_record_plot_830.png", bet_record_plot_830, dpi=600, bg = "white")
# Summary of bets
num_bets <- dim(bets_record)[1]
total_staked <- sum(bets_record$Stake)
total_profit <- sum(bets_record$`Net PL`)
roi <- total_profit / total_staked
cat("Total number of bets:", num_bets)
cat("Total staked:", total_staked)
cat("Total profit:", total_profit)
cat("ROI:", roi)
# Output p-value
p <- pnorm(sum_net_pl, mean=sum_ev, sd=sd_ev, lower.tail=FALSE)
cat("P =", p)
library(readxl)
library(dplyr)
bets_record <- read_excel("c://users/johnk/documents/betting/JK Betting Record.xlsx")
# Subset by sport (if desired)
bets_record <- subset(bets_record, Sport == "Soccer")
bets_record <- bets_record %>%
mutate(
p = 1 / Price,                    # Probability implied by price
my_p = 1 / `My Price`,             # Probability implied by your price
win = Stake * (Price - 1) * 0.98,         # Win calculation
lose = -Stake,                     # Loss calculation
ev = p * win + (1 - p) * lose,     # Expected value (EV) based on market price
my_ev = my_p * win + (1 - my_p) * lose,  # Expected value (EV) based on your price
variance = p * (win - ev)^2 + (1 - p) * (lose - ev)^2,  # Variance based on p
my_variance = my_p * (win - my_ev)^2 + (1 - my_p) * (lose - my_ev)^2  # Variance based on my_p
)
bets_record <- subset(bets_record, !is.na(bets_record$`My Price`))
bets_record <- subset(bets_record, !is.na(bets_record$`Result`))
# Summarise the results
summary_stats <- bets_record %>%
summarise(
sum_ev = sum(ev, na.rm = TRUE),                 # Sum of ev
sum_my_ev = sum(my_ev, na.rm = TRUE),            # Sum of my_ev
sum_variance = sum(variance, na.rm = TRUE),      # Sum of variance
sum_my_variance = sum(my_variance, na.rm = TRUE),# Sum of my_variance
sqrt_sum_variance = sqrt(sum(variance, na.rm = TRUE)),      # Square root of sum of variance
sqrt_sum_my_variance = sqrt(sum(my_variance, na.rm = TRUE)),# Square root of sum of my_variance
sum_net_pl = sum(`Net PL`, na.rm = TRUE))           # Sum of Net PL
# Print the summary stats
print(summary_stats)
# Load required package for plotting
library(ggplot2)
# Extract values from summary_stats
sum_ev <- summary_stats$sum_ev
sum_my_ev <- summary_stats$sum_my_ev
sd_ev <- summary_stats$sqrt_sum_variance
sd_my_ev <- summary_stats$sqrt_sum_my_variance
sum_net_pl <- summary_stats$sum_net_pl
# Define a range for the x-axis based on the means and standard deviations
x_range <- seq(min(sum_ev - 3 * sd_ev, sum_my_ev - 3 * sd_my_ev),
max(sum_ev + 3 * sd_ev, sum_my_ev + 3 * sd_my_ev), length.out = 100)
# Create the data for the normal distribution curves
ev_curve <- dnorm(x_range, mean = sum_ev, sd = sd_ev)
my_ev_curve <- dnorm(x_range, mean = sum_my_ev, sd = sd_my_ev)
# Create a data frame for plotting
plot_data <- data.frame(
x = x_range,
ev_curve = ev_curve,
my_ev_curve = my_ev_curve
)
# Plot the normal distribution curves with a vertical line for sum_net_pl
bet_record_plot_830 <- ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = ev_curve, color = "Market is Correct")) +                # EV curve
geom_line(aes(y = my_ev_curve, color = "My Price is Correct")) +          # My EV curve
geom_vline(xintercept = sum_net_pl, linetype = "dashed", color = "black") +  # Net PL vertical line
labs(
title = "Distribution Curves: Market Price vs. My Price",
x = "Total Profit",
y = "Density",
color = "Assumption"
) +
theme_minimal() +
scale_color_manual(values = c("Market is Correct" = "red", "My Price is Correct" = "blue")) +
geom_label(aes(x = sum_net_pl,
y = max(c(ev_curve, my_ev_curve)),
label = "After 830 bets"),
color = "black",
fill = "white",
vjust = -0.2,
label.size = 0)
bet_record_plot_830
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/betting_variance/viz")
ggsave("bet_record_plot_830.png", bet_record_plot_830, dpi=600, bg = "white")
# Summary of bets
num_bets <- dim(bets_record)[1]
total_staked <- sum(bets_record$Stake)
total_profit <- sum(bets_record$`Net PL`)
roi <- total_profit / total_staked
cat("Total number of bets:", num_bets)
cat("Total staked:", total_staked)
cat("Total profit:", total_profit)
cat("ROI:", roi)
# Output p-value
p <- pnorm(sum_net_pl, mean=sum_ev, sd=sd_ev, lower.tail=FALSE)
cat("P =", p)
library(readxl)
library(dplyr)
bets_record <- read_excel("c://users/johnk/documents/betting/JK Betting Record.xlsx")
# Subset by sport (if desired)
bets_record <- subset(bets_record, Sport == "Soccer")
bets_record <- bets_record %>%
mutate(
p = 1 / Price,                    # Probability implied by price
my_p = 1 / `My Price`,             # Probability implied by your price
win = Stake * (Price - 1) * 0.98,         # Win calculation
lose = -Stake,                     # Loss calculation
ev = p * win + (1 - p) * lose,     # Expected value (EV) based on market price
my_ev = my_p * win + (1 - my_p) * lose,  # Expected value (EV) based on your price
variance = p * (win - ev)^2 + (1 - p) * (lose - ev)^2,  # Variance based on p
my_variance = my_p * (win - my_ev)^2 + (1 - my_p) * (lose - my_ev)^2  # Variance based on my_p
)
bets_record <- subset(bets_record, !is.na(bets_record$`My Price`))
bets_record <- subset(bets_record, !is.na(bets_record$`Result`))
# Summarise the results
summary_stats <- bets_record %>%
summarise(
sum_ev = sum(ev, na.rm = TRUE),                 # Sum of ev
sum_my_ev = sum(my_ev, na.rm = TRUE),            # Sum of my_ev
sum_variance = sum(variance, na.rm = TRUE),      # Sum of variance
sum_my_variance = sum(my_variance, na.rm = TRUE),# Sum of my_variance
sqrt_sum_variance = sqrt(sum(variance, na.rm = TRUE)),      # Square root of sum of variance
sqrt_sum_my_variance = sqrt(sum(my_variance, na.rm = TRUE)),# Square root of sum of my_variance
sum_net_pl = sum(`Net PL`, na.rm = TRUE))           # Sum of Net PL
# Print the summary stats
print(summary_stats)
# Load required package for plotting
library(ggplot2)
# Extract values from summary_stats
sum_ev <- summary_stats$sum_ev
sum_my_ev <- summary_stats$sum_my_ev
sd_ev <- summary_stats$sqrt_sum_variance
sd_my_ev <- summary_stats$sqrt_sum_my_variance
sum_net_pl <- summary_stats$sum_net_pl
# Define a range for the x-axis based on the means and standard deviations
x_range <- seq(min(sum_ev - 3 * sd_ev, sum_my_ev - 3 * sd_my_ev),
max(sum_ev + 3 * sd_ev, sum_my_ev + 3 * sd_my_ev), length.out = 100)
# Create the data for the normal distribution curves
ev_curve <- dnorm(x_range, mean = sum_ev, sd = sd_ev)
my_ev_curve <- dnorm(x_range, mean = sum_my_ev, sd = sd_my_ev)
# Create a data frame for plotting
plot_data <- data.frame(
x = x_range,
ev_curve = ev_curve,
my_ev_curve = my_ev_curve
)
# Plot the normal distribution curves with a vertical line for sum_net_pl
bet_record_plot_830 <- ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = ev_curve, color = "Market is Correct")) +                # EV curve
geom_line(aes(y = my_ev_curve, color = "My Price is Correct")) +          # My EV curve
geom_vline(xintercept = sum_net_pl, linetype = "dashed", color = "black") +  # Net PL vertical line
labs(
title = "Distribution Curves: Market Price vs. My Price",
x = "Total Profit",
y = "Density",
color = "Assumption"
) +
theme_minimal() +
scale_color_manual(values = c("Market is Correct" = "red", "My Price is Correct" = "blue")) +
geom_label(aes(x = sum_net_pl,
y = max(c(ev_curve, my_ev_curve)),
label = "After 830 bets"),
color = "black",
fill = "white",
vjust = -0.1,
label.size = 0)
bet_record_plot_830
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/betting_variance/viz")
ggsave("bet_record_plot_830.png", bet_record_plot_830, dpi=600, bg = "white")
# Summary of bets
num_bets <- dim(bets_record)[1]
total_staked <- sum(bets_record$Stake)
total_profit <- sum(bets_record$`Net PL`)
roi <- total_profit / total_staked
cat("Total number of bets:", num_bets)
cat("Total staked:", total_staked)
cat("Total profit:", total_profit)
cat("ROI:", roi)
# Output p-value
p <- pnorm(sum_net_pl, mean=sum_ev, sd=sd_ev, lower.tail=FALSE)
cat("P =", p)
library(readxl)
library(dplyr)
bets_record <- read_excel("c://users/johnk/documents/betting/JK Betting Record.xlsx")
# Subset by sport (if desired)
bets_record <- subset(bets_record, Sport == "Soccer")
bets_record <- bets_record %>%
mutate(
p = 1 / Price,                    # Probability implied by price
my_p = 1 / `My Price`,             # Probability implied by your price
win = Stake * (Price - 1) * 0.98,         # Win calculation
lose = -Stake,                     # Loss calculation
ev = p * win + (1 - p) * lose,     # Expected value (EV) based on market price
my_ev = my_p * win + (1 - my_p) * lose,  # Expected value (EV) based on your price
variance = p * (win - ev)^2 + (1 - p) * (lose - ev)^2,  # Variance based on p
my_variance = my_p * (win - my_ev)^2 + (1 - my_p) * (lose - my_ev)^2  # Variance based on my_p
)
bets_record <- subset(bets_record, !is.na(bets_record$`My Price`))
bets_record <- subset(bets_record, !is.na(bets_record$`Result`))
# Summarise the results
summary_stats <- bets_record %>%
summarise(
sum_ev = sum(ev, na.rm = TRUE),                 # Sum of ev
sum_my_ev = sum(my_ev, na.rm = TRUE),            # Sum of my_ev
sum_variance = sum(variance, na.rm = TRUE),      # Sum of variance
sum_my_variance = sum(my_variance, na.rm = TRUE),# Sum of my_variance
sqrt_sum_variance = sqrt(sum(variance, na.rm = TRUE)),      # Square root of sum of variance
sqrt_sum_my_variance = sqrt(sum(my_variance, na.rm = TRUE)),# Square root of sum of my_variance
sum_net_pl = sum(`Net PL`, na.rm = TRUE))           # Sum of Net PL
# Print the summary stats
print(summary_stats)
# Load required package for plotting
library(ggplot2)
# Extract values from summary_stats
sum_ev <- summary_stats$sum_ev
sum_my_ev <- summary_stats$sum_my_ev
sd_ev <- summary_stats$sqrt_sum_variance
sd_my_ev <- summary_stats$sqrt_sum_my_variance
sum_net_pl <- summary_stats$sum_net_pl
# Define a range for the x-axis based on the means and standard deviations
x_range <- seq(min(sum_ev - 3 * sd_ev, sum_my_ev - 3 * sd_my_ev),
max(sum_ev + 3 * sd_ev, sum_my_ev + 3 * sd_my_ev), length.out = 100)
# Create the data for the normal distribution curves
ev_curve <- dnorm(x_range, mean = sum_ev, sd = sd_ev)
my_ev_curve <- dnorm(x_range, mean = sum_my_ev, sd = sd_my_ev)
# Create a data frame for plotting
plot_data <- data.frame(
x = x_range,
ev_curve = ev_curve,
my_ev_curve = my_ev_curve
)
# Plot the normal distribution curves with a vertical line for sum_net_pl
bet_record_plot_830 <- ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = ev_curve, color = "Market is Correct")) +                # EV curve
geom_line(aes(y = my_ev_curve, color = "My Price is Correct")) +          # My EV curve
geom_vline(xintercept = sum_net_pl, linetype = "dashed", color = "black") +  # Net PL vertical line
labs(
title = "Distribution Curves: Market Price vs. My Price",
x = "Total Profit",
y = "Density",
color = "Assumption"
) +
theme_minimal() +
scale_color_manual(values = c("Market is Correct" = "red", "My Price is Correct" = "blue")) +
geom_label(aes(x = sum_net_pl,
y = max(c(ev_curve, my_ev_curve)),
label = "After 830 bets"),
color = "black",
fill = "white",
vjust = -0,
label.size = 0)
bet_record_plot_830
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/betting_variance/viz")
ggsave("bet_record_plot_830.png", bet_record_plot_830, dpi=600, bg = "white")
# Summary of bets
num_bets <- dim(bets_record)[1]
total_staked <- sum(bets_record$Stake)
total_profit <- sum(bets_record$`Net PL`)
roi <- total_profit / total_staked
cat("Total number of bets:", num_bets)
cat("Total staked:", total_staked)
cat("Total profit:", total_profit)
cat("ROI:", roi)
# Output p-value
p <- pnorm(sum_net_pl, mean=sum_ev, sd=sd_ev, lower.tail=FALSE)
cat("P =", p)
library(readxl)
library(dplyr)
bets_record <- read_excel("c://users/johnk/documents/betting/JK Betting Record.xlsx")
# Subset by sport (if desired)
bets_record <- subset(bets_record, Sport == "Soccer" & Date <= "2024-09-22")
bets_record <- bets_record %>%
mutate(
p = 1 / Price,                    # Probability implied by price
my_p = 1 / `My Price`,             # Probability implied by your price
win = Stake * (Price - 1) * 0.98,         # Win calculation
lose = -Stake,                     # Loss calculation
ev = p * win + (1 - p) * lose,     # Expected value (EV) based on market price
my_ev = my_p * win + (1 - my_p) * lose,  # Expected value (EV) based on your price
variance = p * (win - ev)^2 + (1 - p) * (lose - ev)^2,  # Variance based on p
my_variance = my_p * (win - my_ev)^2 + (1 - my_p) * (lose - my_ev)^2  # Variance based on my_p
)
bets_record <- subset(bets_record, !is.na(bets_record$`My Price`))
bets_record <- subset(bets_record, !is.na(bets_record$`Result`))
# Summarise the results
summary_stats <- bets_record %>%
summarise(
sum_ev = sum(ev, na.rm = TRUE),                 # Sum of ev
sum_my_ev = sum(my_ev, na.rm = TRUE),            # Sum of my_ev
sum_variance = sum(variance, na.rm = TRUE),      # Sum of variance
sum_my_variance = sum(my_variance, na.rm = TRUE),# Sum of my_variance
sqrt_sum_variance = sqrt(sum(variance, na.rm = TRUE)),      # Square root of sum of variance
sqrt_sum_my_variance = sqrt(sum(my_variance, na.rm = TRUE)),# Square root of sum of my_variance
sum_net_pl = sum(`Net PL`, na.rm = TRUE))           # Sum of Net PL
# Print the summary stats
print(summary_stats)
# Load required package for plotting
library(ggplot2)
# Extract values from summary_stats
sum_ev <- summary_stats$sum_ev
sum_my_ev <- summary_stats$sum_my_ev
sd_ev <- summary_stats$sqrt_sum_variance
sd_my_ev <- summary_stats$sqrt_sum_my_variance
sum_net_pl <- summary_stats$sum_net_pl
# Define a range for the x-axis based on the means and standard deviations
x_range <- seq(min(sum_ev - 3 * sd_ev, sum_my_ev - 3 * sd_my_ev),
max(sum_ev + 3 * sd_ev, sum_my_ev + 3 * sd_my_ev), length.out = 100)
# Create the data for the normal distribution curves
ev_curve <- dnorm(x_range, mean = sum_ev, sd = sd_ev)
my_ev_curve <- dnorm(x_range, mean = sum_my_ev, sd = sd_my_ev)
# Create a data frame for plotting
plot_data <- data.frame(
x = x_range,
ev_curve = ev_curve,
my_ev_curve = my_ev_curve
)
# Plot the normal distribution curves with a vertical line for sum_net_pl
bet_record_plot_405 <- ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = ev_curve, color = "Market is Correct")) +                # EV curve
geom_line(aes(y = my_ev_curve, color = "My Price is Correct")) +          # My EV curve
geom_vline(xintercept = sum_net_pl, linetype = "dashed", color = "black") +  # Net PL vertical line
labs(
title = "Distribution Curves: Market Price vs. My Price",
x = "Total Profit",
y = "Density",
color = "Assumption"
) +
theme_minimal() +
scale_color_manual(values = c("Market is Correct" = "red", "My Price is Correct" = "blue")) +
geom_label(aes(x = sum_net_pl,
y = max(c(ev_curve, my_ev_curve)),
label = "After 405 bets"),
color = "black",
fill = "white",
vjust = -0,
label.size = 0)
bet_record_plot_405
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/betting_variance/viz")
ggsave("bet_record_plot_405.png", bet_record_plot_405, dpi=600, bg = "white")
# Summary of bets
num_bets <- dim(bets_record)[1]
total_staked <- sum(bets_record$Stake)
total_profit <- sum(bets_record$`Net PL`)
roi <- total_profit / total_staked
cat("Total number of bets:", num_bets)
cat("Total staked:", total_staked)
cat("Total profit:", total_profit)
cat("ROI:", roi)
# Output p-value
p <- pnorm(sum_net_pl, mean=sum_ev, sd=sd_ev, lower.tail=FALSE)
cat("P =", p)
29495.07/405
library(readxl)
library(dplyr)
bets_record <- read_excel("c://users/johnk/documents/betting/JK Betting Record.xlsx")
# Subset by sport (if desired)
bets_record <- subset(bets_record, Sport == "Soccer" & Date <= "2024-09-22")
bets_record <- bets_record %>%
mutate(
p = 1 / Price,                    # Probability implied by price
my_p = 1 / `My Price`,             # Probability implied by your price
win = Stake * (Price - 1) * 0.98,         # Win calculation
lose = -Stake,                     # Loss calculation
ev = p * win + (1 - p) * lose,     # Expected value (EV) based on market price
my_ev = my_p * win + (1 - my_p) * lose,  # Expected value (EV) based on your price
variance = p * (win - ev)^2 + (1 - p) * (lose - ev)^2,  # Variance based on p
my_variance = my_p * (win - my_ev)^2 + (1 - my_p) * (lose - my_ev)^2  # Variance based on my_p
)
bets_record <- subset(bets_record, !is.na(bets_record$`My Price`))
bets_record <- subset(bets_record, !is.na(bets_record$`Result`))
# Summarise the results
summary_stats <- bets_record %>%
summarise(
sum_ev = sum(ev, na.rm = TRUE),                 # Sum of ev
sum_my_ev = sum(my_ev, na.rm = TRUE),            # Sum of my_ev
sum_variance = sum(variance, na.rm = TRUE),      # Sum of variance
sum_my_variance = sum(my_variance, na.rm = TRUE),# Sum of my_variance
sqrt_sum_variance = sqrt(sum(variance, na.rm = TRUE)),      # Square root of sum of variance
sqrt_sum_my_variance = sqrt(sum(my_variance, na.rm = TRUE)),# Square root of sum of my_variance
sum_net_pl = sum(`Net PL`, na.rm = TRUE))           # Sum of Net PL
# Print the summary stats
print(summary_stats)
# Load required package for plotting
library(ggplot2)
# Extract values from summary_stats
sum_ev <- summary_stats$sum_ev
sum_my_ev <- summary_stats$sum_my_ev
sd_ev <- summary_stats$sqrt_sum_variance
sd_my_ev <- summary_stats$sqrt_sum_my_variance
sum_net_pl <- summary_stats$sum_net_pl
# Define a range for the x-axis based on the means and standard deviations
x_range <- seq(min(sum_ev - 3 * sd_ev, sum_my_ev - 3 * sd_my_ev),
max(sum_ev + 3 * sd_ev, sum_my_ev + 3 * sd_my_ev), length.out = 100)
# Create the data for the normal distribution curves
ev_curve <- dnorm(x_range, mean = sum_ev, sd = sd_ev)
my_ev_curve <- dnorm(x_range, mean = sum_my_ev, sd = sd_my_ev)
# Create a data frame for plotting
plot_data <- data.frame(
x = x_range,
ev_curve = ev_curve,
my_ev_curve = my_ev_curve
)
# Plot the normal distribution curves with a vertical line for sum_net_pl
bet_record_plot_405 <- ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = ev_curve, color = "Market is Correct")) +                # EV curve
geom_line(aes(y = my_ev_curve, color = "My Price is Correct")) +          # My EV curve
geom_vline(xintercept = sum_net_pl, linetype = "dashed", color = "black") +  # Net PL vertical line
labs(
title = "Distribution Curves: Market Price vs. My Price",
x = "Total Profit",
y = "Density",
color = "Assumption"
) +
theme_minimal() +
scale_color_manual(values = c("Market is Correct" = "red", "My Price is Correct" = "blue")) +
geom_label(aes(x = sum_net_pl,
y = max(c(ev_curve, my_ev_curve)),
label = "After 405 bets"),
color = "black",
fill = "white",
vjust = -0,
label.size = 0)
bet_record_plot_405
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/betting_variance/viz")
bet_record_plot_405
setwd("C://users/johnk/documents/github/johnknightstats.github.io/posts/_drafts/betting_variance/viz")
ggsave("bet_record_plot_405.png", bet_record_plot_405, dpi=600, bg = "white")
# Summary of bets
num_bets <- dim(bets_record)[1]
total_staked <- sum(bets_record$Stake)
total_profit <- sum(bets_record$`Net PL`)
roi <- total_profit / total_staked
cat("Total number of bets:", num_bets)
cat("Total staked:", total_staked)
cat("Total profit:", total_profit)
cat("ROI:", roi)
# Output p-value
p <- pnorm(sum_net_pl, mean=sum_ev, sd=sd_ev, lower.tail=FALSE)
cat("P =", p)
#####################################################
### Some simulations of betting P&L distributions ###
#####################################################
library(ggplot2)
library(here)
setwd(here("posts/betting_variance/viz"))
#####################################################
### Some simulations of betting P&L distributions ###
#####################################################
library(ggplot2)
library(here)
setwd(here("posts/_drafts/betting_variance/viz"))
# Set a custom color palette
my_palette <- c("#233D4D", "#FF9F1C", "#41EAD4", "#FDFFFC", "#F71735")
# ---- Function to generate P&L from n bets with probability p ----
sim_bets <- function(n, p) {
# Simulate n outcomes: 1 for win, 0 for loss
outcomes <- rbinom(n, size = 1, prob = p)
odds <- 1 / p # decimal odds
# For each bet, P&L is (odds - 1) if win, -1 if loss
pl <- ifelse(outcomes == 1, odds - 1, -1)
# Return total profit or loss
total_pl <- sum(pl)
return(total_pl)
}
# ---- Function to plot m repetitions of sim_bets ----
sim_iterations_plot <- function(m, n, p, binwidth = 2) {
my_pls <- c()
for (i in 1:m) {
new_pl <- sim_bets(n, p)
my_pls <- c(my_pls, new_pl)
}
my_df <- data.frame(run = c(1:m), profit_loss = my_pls)
odds <- format(round(1 / p, 1), nsmall = 1)
plot_title <- paste("Distribution of mean after", n, "bets at odds of", odds, "(simulated", m, "times)")
ggplot(my_df, aes(x=profit_loss)) +
geom_histogram(binwidth = binwidth, fill = my_palette[1]) +
labs(x = "Profit", y = "Count", title = plot_title) +
theme(plot.title = element_text(size = 12))
}
(plot1 <- sim_iterations_plot(10000, 30, 0.5))
ggsave("mean_distribution_2.png", plot1, dpi = 600)
